c
session
@game
c
@game.game_over?
@game.winner = nil
@game.winner
@game
@game.game_over?
cell.present?
cell
c
cell
c
@game.game_over?
@game
c
@game
game_over?
c
session[:game_board] = nil
session[:game_board]
session
c
@game
c
@game
@game.board
c
@game.board
@game
c
session[:player2] = params[:player2]
 session[:player1] = params[:player1]
 params[:player1]
c
session[:current_player]
c
session[:current_player]
@game
c
@game
c
@game
c
session[:game_board]
session[:game_winner]
c
session[:game_winner]
session[:game_board]
c
session[:game_board]
(session[:game_board]
c
@game.board
@game
c
 session[:current_player]
@game
c
 session[:current_player]
@game
c
game
n
c
Game.last
@game
session[:game_winner]
session[:game_board]
c
 game_path(game)
game
n
c
 game_path(game)
 game = Game.new(player1: session[:player1], player2: session[:player2])
c
Game.new
Game
self
game
@game
c
game_path
games_path
root_path
 session[:current_player] = session[:player1]
 session[:player2] = params[:player2]
 session[:player1] = params[:player1]
 params[:player1]
c!
c
player
combination.all? { |row, col| @board[row][col] == player }
combination.all?
combination.present?
combination
c
 combination.all?
combination=winning_combinations.first
winning_combinations.first
winning_combinations
player
c
 params.permit(:player1, :player2)
 params
 params.require(:games)
 params.require(:gameS)
 params.require(:game)
params
